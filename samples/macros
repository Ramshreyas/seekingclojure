(defmacro null? [arg]
  `(= ~arg null))

(defmacro true? [arg]
  `(= ~arg true))

(defmacro false? [arg]
  `(= ~arg false))

(defmacro empty? [coll]
  `(not (seq ~coll)))

(defmacro cond [test exec]
  `(if ~test ~exec))

(defmacro cond [test exec & rest]
  `(if ~test ~exec (cond ~rest)))

(defmacro >= [x y]
  `(or (> ~x ~y) (= ~x ~y)))

(defmacro <= [x y]
  `(or (< ~x ~y) (= ~x ~y)))

(defmacro >> [arg func1 func2 func3]
  `(~func3 (~func2 (~func1 arg))))
